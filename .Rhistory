for (j in 1:length(snr.vec)){
SNR = snr.vec[j]
for (i in 1:n_sim){
#Simulate the data
#------------------------------
df <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
ID <- paste(j,i) #identification touple of simulation
#calculate AND store the results
#------------------------------
#Lasso
res_lasso = cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "Lasso", res_lasso$retention, res_lasso$nonzero, res_lasso$mse)
counter = counter+1 #increase counter by 1
#Relaxd Lasso
res_lasso = cv.relaxed_lasso_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "Relaxed Lasso", res_lasso$retention, res_lasso$nonzero, res_lasso$mse)
counter = counter+1 #increase counter by 1
#Random Forest
res_RF = RF_VSURF_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "RF", res_RF$retention, res_RF$nonzero, res_RF$mse)
counter = counter+1 #increase counter by 1
#Save results
#------------------------------
#write.csv(results,"sim2d.csv", row.names = FALSE)
}
}
end_time <- Sys.time()
cat("Duration for Number of Sims = ", n_sim, "is: ", end_time - start_time)
plot_simulation_results(results, beta)
results
results$Retention = as.numeric(results$Retention)
results$Nonzero = as.numeric(results$Nonzero)
results$Prediction = as.numeric(results$Prediction)
results
plot_simulation_results(results, beta)
results
plot_simulation_results(results, beta)
results$SNR <- as.numeric(results$SNR)
plot_simulation_results(results, beta)
SNR=4
df <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
SNR=4
df <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
SNR=6
df <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
cv.lasso_2_pred <- function(data, #data frame - dependent variable first
test_data, #data frame - dependent variable first
beta # true coefficients
){
#--------------------------
# Uses 10 fold CV and uses best prediciton lambda
# as estimate for variable selection
# -------------------------
x <- data.matrix(data[,-1]) #explan var, glmnet can't use dataframe
y <- data.matrix(data[,1]) #dependent var, glmnet can't use dataframe
x_test <- data.matrix(test_data[,-1]) #explan var, glmnet can't use dataframe
y_test <- data.matrix(test_data[,1]) #dependent var, glmnet can't use dataframe
cv.out = cv.glmnet(x, y, alpha = 1, intercept=FALSE) # Fit lasso model on training data
#lam = cv.out$lambda.1se # Select more conservative lambda for variable selection
lam = cv.out$lambda.min
#---------------------
# Retention Frequency
#---------------------
lasso_coef = predict(cv.out, type = "coefficients", s = lam) # Display coefficients using lambda chosen by CV
retention = var_retention(lasso_coef, beta) #counts significant vars
identification = var_identification(lasso_coef, beta) #counts all vars
#---------------------
# Number Nonzero elements
#---------------------
nonzero = var_nonzero(lasso_coef, beta) #count nonzero vars
#---------------------
# MSE - test set
#---------------------
pred_y = predict(cv.out, newx = x_test)
mse = (mean(y_test - pred_y)^2)
#---------------------
# MSE - CV
#---------------------
cv.mse <- cv.out$cvm[cv.out$lambda == cv.out$lambda.1se]
results = list("retention" = retention, "identification" =identification, "mse" = mse, "cv.mse" = cv.mse, "nonzero" = nonzero)
return(results)
}
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
cv.lasso_2_pred <- function(data, #data frame - dependent variable first
test_data, #data frame - dependent variable first
beta # true coefficients
){
#--------------------------
# Uses 10 fold CV and uses best prediciton lambda
# as estimate for variable selection
# -------------------------
x <- data.matrix(data[,-1]) #explan var, glmnet can't use dataframe
y <- data.matrix(data[,1]) #dependent var, glmnet can't use dataframe
x_test <- data.matrix(test_data[,-1]) #explan var, glmnet can't use dataframe
y_test <- data.matrix(test_data[,1]) #dependent var, glmnet can't use dataframe
cv.out = glmnet(x, y, alpha = 1, intercept=FALSE) # Fit lasso model on training data
#lam = cv.out$lambda.1se # Select more conservative lambda for variable selection
lam = cv.out$lambda.min
#---------------------
# Retention Frequency
#---------------------
lasso_coef = predict(cv.out, type = "coefficients", s = lam) # Display coefficients using lambda chosen by CV
retention = var_retention(lasso_coef, beta) #counts significant vars
identification = var_identification(lasso_coef, beta) #counts all vars
#---------------------
# Number Nonzero elements
#---------------------
nonzero = var_nonzero(lasso_coef, beta) #count nonzero vars
#---------------------
# MSE - test set
#---------------------
pred_y = predict(cv.out, newx = x_test)
mse = (mean(y_test - pred_y)^2)
#---------------------
# MSE - CV
#---------------------
cv.mse <- cv.out$cvm[cv.out$lambda == cv.out$lambda.1se]
results = list("retention" = retention, "identification" =identification, "mse" = mse, "cv.mse" = cv.mse, "nonzero" = nonzero)
return(results)
}
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
cv.lasso_2_pred <- function(data, #data frame - dependent variable first
test_data, #data frame - dependent variable first
beta # true coefficients
){
#--------------------------
# Uses 10 fold CV and uses best prediciton lambda
# as estimate for variable selection
# -------------------------
x <- data.matrix(data[,-1]) #explan var, glmnet can't use dataframe
y <- data.matrix(data[,1]) #dependent var, glmnet can't use dataframe
x_test <- data.matrix(test_data[,-1]) #explan var, glmnet can't use dataframe
y_test <- data.matrix(test_data[,1]) #dependent var, glmnet can't use dataframe
cv.out = cv.glmnet(x, y, alpha = 1, intercept=FALSE) # Fit lasso model on training data
#lam = cv.out$lambda.1se # Select more conservative lambda for variable selection
lam = cv.out$lambda.min
#---------------------
# Retention Frequency
#---------------------
lasso_coef = predict(cv.out, type = "coefficients", s = lam) # Display coefficients using lambda chosen by CV
retention = var_retention(lasso_coef, beta) #counts significant vars
identification = var_identification(lasso_coef, beta) #counts all vars
#---------------------
# Number Nonzero elements
#---------------------
nonzero = var_nonzero(lasso_coef, beta) #count nonzero vars
#---------------------
# MSE - test set
#---------------------
pred_y = predict(cv.out, newx = x_test)
mse = (mean(y_test - pred_y)^2)
#---------------------
# MSE - CV
#---------------------
cv.mse <- cv.out$cvm[cv.out$lambda == cv.out$lambda.1se]
results = list("retention" = retention, "identification" =identification, "mse" = mse, "cv.mse" = cv.mse, "nonzero" = nonzero)
return(results)
}
SNR=6
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
a <- cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
a
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
x_train <- data.matrix(df[,-1]) #explan var, glmnet can't use dataframe
y_train <- data.matrix(df[,1]) #dependent var, glmnet can't use dataframe
x_test <- data.matrix(df_test[,-1]) #explan var, glmnet can't use dataframe
y_test <- data.matrix(df_test[,1]) #dependent var, glmnet can't use dataframe
model <- glmnet(x_train, y_train, alpha=1, intercept=FALSE)
model
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
x_train <- data.matrix(df[,-1]) #explan var, glmnet can't use dataframe
y_train <- data.matrix(df[,1]) #dependent var, glmnet can't use dataframe
x_test <- data.matrix(df_test[,-1]) #explan var, glmnet can't use dataframe
y_test <- data.matrix(df_test[,1]) #dependent var, glmnet can't use dataframe
model <- glmnet(x_train, y_train, alpha=1, intercept=FALSE)
predict(model, newx=x_test)
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
x_train <- data.matrix(df[,-1]) #explan var, glmnet can't use dataframe
y_train <- data.matrix(df[,1]) #dependent var, glmnet can't use dataframe
x_test <- data.matrix(df_test[,-1]) #explan var, glmnet can't use dataframe
y_test <- data.matrix(df_test[,1]) #dependent var, glmnet can't use dataframe
model <- glmnet(x_train, y_train, alpha=1, intercept=FALSE)
predict(model, s=model$lambda.min, newx=x_test)
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
x_train <- data.matrix(df[,-1]) #explan var, glmnet can't use dataframe
y_train <- data.matrix(df[,1]) #dependent var, glmnet can't use dataframe
x_test <- data.matrix(df_test[,-1]) #explan var, glmnet can't use dataframe
y_test <- data.matrix(df_test[,1]) #dependent var, glmnet can't use dataframe
model <- glmnet(x_train, y_train, alpha=1, intercept=FALSE)
predict(model, s=1, newx=x_test)
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
x_train <- data.matrix(df[,-1]) #explan var, glmnet can't use dataframe
y_train <- data.matrix(df[,1]) #dependent var, glmnet can't use dataframe
x_test <- data.matrix(df_test[,-1]) #explan var, glmnet can't use dataframe
y_test <- data.matrix(df_test[,1]) #dependent var, glmnet can't use dataframe
model <- glmnet(x_train, y_train, alpha=1, intercept=FALSE)
model
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
x_train <- data.matrix(df[,-1]) #explan var, glmnet can't use dataframe
y_train <- data.matrix(df[,1]) #dependent var, glmnet can't use dataframe
x_test <- data.matrix(df_test[,-1]) #explan var, glmnet can't use dataframe
y_test <- data.matrix(df_test[,1]) #dependent var, glmnet can't use dataframe
model <- glmnet(x_train, y_train, alpha=1, intercept=FALSE)
model$lambda.min
df <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.9, beta=beta, SNR = SNR)$df
x_train <- data.matrix(df[,-1]) #explan var, glmnet can't use dataframe
y_train <- data.matrix(df[,1]) #dependent var, glmnet can't use dataframe
x_test <- data.matrix(df_test[,-1]) #explan var, glmnet can't use dataframe
y_test <- data.matrix(df_test[,1]) #dependent var, glmnet can't use dataframe
model <- cv.glmnet(x_train, y_train, alpha=1, intercept=FALSE)
cv.relaxed_lasso_pred <- function(data, #data frame - dependent variable first
test_data, #data frame - dependent variable first
beta # true coefficients
){
#--------------------------
# Uses 10 fold CV and uses lambda
# and gamma minimizing prediction error
# for variable selection
# -------------------------
x <- data.matrix(data[,-1]) #explan var, glmnet can't use dataframe
y <- data.matrix(data[,1]) #dependent var, glmnet can't use dataframe
x_test <- data.matrix(test_data[,-1]) #explan var, glmnet can't use dataframe
y_test <- data.matrix(test_data[,1]) #dependent var, glmnet can't use dataframe
cv.out = cv.glmnet(x, y,intercept=FALSE, relax=TRUE) # Fit lasso model on training data
#---------------------
# Retention Frequency
#---------------------
lasso_coef = predict(cv.out, type = "coefficients", s = "lambda.min", gamma = "gamma.min")#"gamma.min") # Display coefficients using lambda chosen by CV
retention = var_retention(lasso_coef, beta) #counts significant vars
identification = var_identification(lasso_coef, beta) #counts all vars
#---------------------
# Number Nonzero elements
#---------------------
nonzero = var_nonzero(lasso_coef, beta) #count nonzero vars
#---------------------
# MSE - test set
#---------------------
pred_y = predict(cv.out, newx = x_test)
mse = (mean(y_test - pred_y)^2)
#---------------------
# MSE - CV
#---------------------
cv.mse <- cv.out$cvm[cv.out$lambda == cv.out$lambda.1se]
results = list("retention" = retention, "identification" =identification, "mse" = mse, "cv.mse" = cv.mse, "nonzero" = nonzero)
return(results)
}
#--------------------------------
# Simulation Experimenting with True MSE
#--------------------------------
set.seed(456)
start_time <- Sys.time()
# Simulation Parameters
#---------------------
n_sim = 2 # Number of simulations
snr.vec = exp(seq(log(0.05),log(6),length=10)) # Signal-to-noise ratios
beta = beta_1(p=50,s=5) # beta vector
#Container to store results
#---------------------
colnames = c("ID_sim", "SNR", "Method", "Retention", "Nonzero", "Prediction")
results = data.frame(matrix(NaN, ncol=(6), nrow=(n_sim*3*length(snr.vec))))
colnames(results) <- colnames
# Initialize Counter
counter <- 1
#Simulation
for (j in 1:length(snr.vec)){
SNR = snr.vec[j]
for (i in 1:n_sim){
#Simulate the data
#------------------------------
df <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
ID <- paste(j,i) #identification touple of simulation
#calculate AND store the results
#------------------------------
#Lasso
res_lasso = cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "Lasso", res_lasso$retention, res_lasso$nonzero, res_lasso$cv.mse)
counter = counter+1 #increase counter by 1
#Relaxd Lasso
res_lasso = cv.relaxed_lasso_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "Relaxed Lasso", res_lasso$retention, res_lasso$nonzero, res_lasso$cv.mse)
counter = counter+1 #increase counter by 1
#Random Forest
res_RF = RF_VSURF_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "RF", res_RF$retention, res_RF$nonzero, res_RF$mse)
counter = counter+1 #increase counter by 1
#Save results
#------------------------------
#write.csv(results,"sim2d.csv", row.names = FALSE)
}
}
#--------------------------------
# Simulation Experimenting with True MSE
#--------------------------------
set.seed(456)
start_time <- Sys.time()
# Simulation Parameters
#---------------------
n_sim = 2 # Number of simulations
snr.vec = exp(seq(log(0.05),log(6),length=10)) # Signal-to-noise ratios
beta = beta_1(p=50,s=5) # beta vector
#Container to store results
#---------------------
colnames = c("ID_sim", "SNR", "Method", "Retention", "Nonzero", "Prediction")
results = data.frame(matrix(NaN, ncol=(6), nrow=(n_sim*3*length(snr.vec))))
colnames(results) <- colnames
# Initialize Counter
counter <- 1
#Simulation
for (j in 1:length(snr.vec)){
SNR = snr.vec[j]
for (i in 1:n_sim){
#Simulate the data
#------------------------------
df <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
ID <- paste(j,i) #identification touple of simulation
#calculate AND store the results
#------------------------------
#Lasso
res_lasso = cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "Lasso", res_lasso$retention, res_lasso$nonzero, res_lasso$cv.mse)
counter = counter+1 #increase counter by 1
#Relaxd Lasso
res_lasso = cv.relaxed_lasso_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "Relaxed Lasso", res_lasso$retention, res_lasso$nonzero, res_lasso$cv.mse)
counter = counter+1 #increase counter by 1
#Random Forest
res_RF = RF_VSURF_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "RF", res_RF$retention, res_RF$nonzero, res_RF$mse)
counter = counter+1 #increase counter by 1
#Save results
#------------------------------
#write.csv(results,"sim2d.csv", row.names = FALSE)
}
}
end_time <- Sys.time()
cat("Duration for Number of Sims = ", n_sim, "is: ", end_time - start_time)
plot_simulation_results(results, beta)
results$SNR = as.numeric(results$SNR)
results$Retention = as.numeric(results$Retention)
results$Nonzero = as.numeric(results$Nonzero)
results$Prediction = as.numeric(results$Prediction)
plot_simulation_results(results, beta)
View(results)
#--------------------------------
# Simulation Experimenting with True MSE
#--------------------------------
set.seed(456)
start_time <- Sys.time()
# Simulation Parameters
#---------------------
n_sim = 2 # Number of simulations
snr.vec = exp(seq(log(0.05),log(6),length=10)) # Signal-to-noise ratios
beta = beta_1(p=50,s=5) # beta vector
#Container to store results
#---------------------
colnames = c("ID_sim", "SNR", "Method", "Retention", "Nonzero", "Prediction")
results = data.frame(matrix(NaN, ncol=(6), nrow=(n_sim*3*length(snr.vec))))
colnames(results) <- colnames
# Initialize Counter
counter <- 1
#Simulation
for (j in 1:length(snr.vec)){
SNR = snr.vec[j]
for (i in 1:n_sim){
#Simulate the data
#------------------------------
df <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
ID <- paste(j,i) #identification touple of simulation
#calculate AND store the results
#------------------------------
#Lasso
res_lasso = cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "Lasso", res_lasso$retention, res_lasso$nonzero, res_lasso$mse)
counter = counter+1 #increase counter by 1
#Relaxd Lasso
res_lasso = cv.relaxed_lasso_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "Relaxed Lasso", res_lasso$retention, res_lasso$nonzero, res_lasso$mse)
counter = counter+1 #increase counter by 1
#Random Forest
res_RF = RF_VSURF_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "RF", res_RF$retention, res_RF$nonzero, res_RF$mse)
counter = counter+1 #increase counter by 1
#Save results
#------------------------------
#write.csv(results,"sim2d.csv", row.names = FALSE)
}
}
end_time <- Sys.time()
cat("Duration for Number of Sims = ", n_sim, "is: ", end_time - start_time)
plot_simulation_results(results, beta)
results$SNR = as.numeric(results$SNR)
results$Retention = as.numeric(results$Retention)
results$Nonzero = as.numeric(results$Nonzero)
results$Prediction = as.numeric(results$Prediction)
plot_simulation_results(results, beta)
#--------------------------------
# Simulation Experimenting with True MSE
#--------------------------------
set.seed(456)
start_time <- Sys.time()
# Simulation Parameters
#---------------------
n_sim = 100 # Number of simulations
snr.vec = exp(seq(log(0.05),log(6),length=10)) # Signal-to-noise ratios
beta = beta_1(p=50,s=5) # beta vector
#Container to store results
#---------------------
colnames = c("ID_sim", "SNR", "Method", "Retention", "Nonzero", "Prediction")
results = data.frame(matrix(NaN, ncol=(6), nrow=(n_sim*3*length(snr.vec))))
colnames(results) <- colnames
# Initialize Counter
counter <- 1
#Simulation
for (j in 1:length(snr.vec)){
SNR = snr.vec[j]
for (i in 1:n_sim){
#Simulate the data
#------------------------------
df <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
df_test <- simulate(n=100, p=50, rho=0.5, beta=beta, SNR = SNR)$df
ID <- paste(j,i) #identification touple of simulation
#calculate AND store the results
#------------------------------
#Lasso
res_lasso = cv.lasso_2_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "Lasso", res_lasso$retention, res_lasso$nonzero, res_lasso$mse)
counter = counter+1 #increase counter by 1
#Relaxd Lasso
res_lasso = cv.relaxed_lasso_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "Relaxed Lasso", res_lasso$retention, res_lasso$nonzero, res_lasso$mse)
counter = counter+1 #increase counter by 1
#Random Forest
res_RF = RF_VSURF_pred(data=df, test_data = df_test, beta=beta)
results[counter,] <- c(ID, SNR, "RF", res_RF$retention, res_RF$nonzero, res_RF$mse)
counter = counter+1 #increase counter by 1
#Save results
#------------------------------
write.csv(results,"sim_experimenting_test_mse.csv", row.names = FALSE)
}
}

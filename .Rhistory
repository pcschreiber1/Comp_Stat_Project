data()
for (r in 1:num_sim){
set.seed(100 + r)
training_sample <- data_generator(N = N, beta = beta_true) #Drawing test and training sample
test_sample <- data_generator(N = N, beta = beta_true)
#---------------------------------------------------------------
X_power_training <- matrix(NaN,N,5) #Generating new variables
X_power_test <- matrix(NaN,N,5)
for (i in 1:5){
X_power_training[,i] <- training_sample[,2]^i
X_power_test[,i] <- test_sample[,2]^i
}
data_power_training <- data.frame("Y" = training_sample[,1], X_power_training)
data_power_test <- data.frame("Y"=test_sample[,1], X_power_test)
#---------------------------------------------------------------
#Fitting models for polynomials with different degrees
MSE_result <- c(NaN)
pred_error_result <- c(NaN)
l_model <- lm(Y ~ 1, data = data_power_training) #special case
MSE_result[1] <- mse(lm = l_model)
pred_error_result[1] <- mean((data_power_test[,1] - coef(l_model))^2)
for (k in 1:5){
l_model <- lm(data_power_training[,1] ~ X_power_training[,1:k])
MSE_result[k+1] <- mse(lm = l_model) #k+1 due to constant case
pred_error_result[k+1] <- a_pred_error(data_test = data_power_test[,1:(k+1)], #k+1 due Y-variable
beta_hat = coef(l_model),
N = N)
}
result_MSE[r] <- MSE_result #storing the results
result_pred[r] <- pred_error_result
}
df <- simulate()
simulate()
f(10)
# Imports
library(MASS)
# Generating Sample
f <- function(x) {
+ x <- x+1
+ return(x^2)
+ }
f(10)
f <- function(x) {
+ x <- x+1
+ return(x^2)
+ }
x <- 3
f(x)
# Generating Sample
f <- function(x){
+ x <- x+1
+ return(x^2)
+ }
# Generating Sample
f <- function(x){
+ x <- x+1
+ return(x^2)}
x <- 3
f(x)
# Generating Sample
f <- function(x){
x <- x+1
return(x^2)}
x <- 3
f(x)
# This module contains auxiliary functions for XY
# which are used in the main notebook.
# --------------------------------------------------------
# Imports
library(MASS)
# Generating Sample
simulate <- function(n1 = 300,
mu1 = c(-3,3),
cov1 = matrix(c(16,-2, -2, 9), nrow=2, ncol=2),
n2 = 500,
mu2 = c(5,5),
cov2 = matrix(c(16,-2, -2, 9), nrow=2, ncol=2)
){
#-------Random Sample
X1 <- mvrnorm(n1, mu1, cov1)
X2 <- mvrnorm(n2, mu2, cov2)
#-------Vector of indicator variables of class dependence
Class <- c(rep(1,n1), rep(2,n2))
#-------Creating data frame
df <- data.frame(Class, rbind(X1, X2))
colnames(df) <- c("Class", "X1", "X2")
df$Class <- factor(df$Class) #for categorical variable
return(df)
}
df <- simulate()
# Generating Sample
simulate <- function(n, #number of observations
p, #number of covariates
rho, #degree of covariance
beta, #vetctor of true coefficients
var_error #variance of the errors
){
if (length(beta) != p){
cat("Number of beta coefficient unequal to p")
}else{
#Mean of explanatory variables
mu = rep(0,p) #all covariates are standardized with mean zero
#Variance-Covariance Matrix
###Note: Matrix only depends on p and rho
toep = rho^(0:(p-1)) #creates geometric series starting at one
sigma = toeplitz(toep) #creates toeplitz matrix from geometric series: rho^(i-j)
X = mvrnorm(n, mu, sigma)
epsilon = rnorm(n, 0, var_error)
Y = X %*% beta + epsilon
#-------Creating data frame
df <- data.frame(Y, X)
return(df)
}
}
df <- simulate(n=10, p=100, rho=0.5, beta=beta, var_error = 1)
beta = c(1,1,1, rep(0, 97))
df <- simulate(n=10, p=100, rho=0.5, beta=beta, var_error = 1)
# This module contains auxiliary functions for XY
# which are used in the main notebook.
# --------------------------------------------------------
# Imports
library(MASS)
library(stats)
# Generating Sample
simulate <- function(n, #number of observations
p, #number of covariates
rho, #degree of covariance
beta, #vetctor of true coefficients
var_error #variance of the errors
){
if (length(beta) != p){
cat("Number of beta coefficient unequal to p")
}else{
#Mean of explanatory variables
mu = rep(0,p) #all covariates are standardized with mean zero
#Variance-Covariance Matrix
###Note: Matrix only depends on p and rho
toep = rho^(0:(p-1)) #creates geometric series starting at one
sigma = toeplitz(toep) #creates toeplitz matrix from geometric series: rho^(i-j)
X = mvrnorm(n, mu, sigma)
epsilon = rnorm(n, 0, var_error)
Y = X %*% beta + epsilon
#-------Creating data frame
df <- data.frame(Y, X)
return(df)
}
}
beta = c(1,1,1, rep(0, 97))
df <- simulate(n=10, p=100, rho=0.5, beta=beta, var_error = 1)
View(df)
View(results)
library(ggplot2)
n_sim = 10
colnames <- c("ID_sim", "SNR", "Method", "Retention", "Nonzero", "Prediction")
snr.vec = exp(seq(log(0.05), log(6), length(10)))
results = matrix(NaN, ncol=6, nrows=n_sim*3*length(snr.vec))
colnames(results) = colnames
View(results)
colnames <- c("ID_sim", "SNR", "Method", "Retention", "Nonzero", "Prediction")
snr.vec = exp(seq(log(0.05), log(6), length(10)))
results = matrix(NaN, ncol=6, nrows=(n_sim*3*length(snr.vec)))
colnames(results) = colnames
View(results)
results = matrix(NaN, ncol=6, nrows=(n_sim*3*length(snr.vec)))
colnames <- c("ID_sim", "SNR", "Method", "Retention", "Nonzero", "Prediction")
snr.vec = exp(seq(log(0.05), log(6), length(10)))
results = matrix(NaN, ncol=6, nrow=(n_sim*3*length(snr.vec)))
colnames(results) = colnames
View(results)
setwd("C:\Projects\Comp_Stat_Project")
sim1 <- read.csv("sim1.csv", header=TRUE)
View(sim1)
getwd()
setwd("C:/Projects/Comp_Stat_Project")
sim1 <- read.csv("sim1.csv", header=TRUE)
View(sim1)
#Find mean for each
mean(sim1$Retention[sim1$Method=="Lasso")
#Find mean for each
mean(sim1$Retention[sim1$Method=="Lasso"])
#Find mean for each
for (SNR in snr.vec){
print(mean(sim1$Retention[sim1$Method=="Lasso" & sim1$SNR == SNR]))
}
sim1$SNR == snr.vec[1]
mean(sim1$Retention [sim1$SNR == snr.vec[1]])
sim1 = sim1[1:40]
sim1 = sim1[1:40,]
mean(sim1$Retention [sim1$SNR == snr.vec[1]])
sim1$Retention [sim1$SNR == snr.vec[1]]
sim1$SNR
sim1$SNR == 0.05
print(mean(sim1$Retention[sim1$Method=="Lasso" & sim1$SNR == 0.5]))
for (SNR in snr.vec){
print(mean(sim1$Retention[sim1$Method=="Lasso" & sim1$SNR == 0.5]))
}
for (i in snr.vec){
print(mean(sim1$Retention[sim1$Method=="Lasso" & sim1$SNR == 0.5]))
}
sim1$Retention[sim1$Method=="Lasso" & sim1$SNR == 0.5]
sim1$Retention[sim1$Method=="Lasso"]# & sim1$SNR == 0.5]
sim1$Retention[(sim1$Method=="Lasso") & (sim1$SNR == 0.5)]
for (i in snr.vec){
print(mean(sim1$Retention[sim1$SNR == 0.5]))
}
sim1$Retention[sim1$SNR == 0.5]
sim1$Retention[sim1$SNR == 0.6]
sim1$SNR == 0.6
sim1$SNR == 6
sim1$Retention[sim1$SNR == 6]
sim1$SNR == 0.5
print(mean(sim1$Retention[sim1$SNR == 0.05]))
for (i in snr.vec){
print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == 0.05]))
}
for (i in snr.vec){
print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == i]))
}
snr.vec
for (i in snr.vec){
print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
}
for (i in snr.vec){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
sim1$SNR == i
}
for (i in snr.vec){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == i)
}
for (i in snr.vec){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == 0.05)
}
for (i in snr.vec){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == as.numeric(i))
}
#Find mean for each
for (i in snr.vec){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
#print(sim1$SNR == as.numeric(i))
print(i)
}
for (i in snr.vec){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
#print(sim1$SNR == as.numeric(i))
typeof(i)
}
for (i in snr.vec){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
#print(sim1$SNR == as.numeric(i))
print(typeof(i))
}
for (i in snr.vec){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
#print(sim1$SNR == as.numeric(i))
print(typeof(as.numeric(i)))
}
#Find mean for each
for (i in snr.vec){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
#print(sim1$SNR == as.numeric(i))
print(typeof(as.factor(i)))
}
sim1$SNR = rep(1:10, 4)
View(sim1)
for (i in 1:10){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == i)
}
for (i in 1:10){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == i)
print(typeof(i))
}
typeof(0.5)
sim1$SNR == 0.5
sim1$SNR == 0.05
sim1 <- read.csv("sim1.csv", header=TRUE)
sim1$SNR == 0.05
for (i in 0.05){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == i)
print(typeof(i))
}
for (i in (exp(seq(log(0.05), log(6), length=10)))){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == i)
print(typeof(i))
}
sim1 <- read.csv("sim1.csv", header=TRUE)
exp(seq(log(0.05), log(6), length=10))
snr.vec = exp(seq(log(0.05), log(6), length=10))
for (i in snr.vec){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == i)
print(typeof(i))
}
for (i in 0.05){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == i)
print(typeof(i))
}
for (i in snr.vec[1]){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == i)
print(typeof(i))
}
for (i in snr.vec[1]){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == as.numeric(i))
print(typeof(i))
}
for (i in snr.vec[1]){
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == as.integer(i))
print(typeof(i))
}
for (i in 1:10){
SNR = as.numeric(snr.vec[i])
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == SNR
print(typeof(SNR))
}
for (i in 1:10){
SNR = as.numeric(snr.vec[i])
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == SNR
print(typeof(SNR))
}
for (i in 1:10){
SNR = as.numeric(snr.vec[i])
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == SNR)
print(typeof(SNR))
}
for (i in 1:10){
SNR = as.numeric(snr.vec[i])
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == SNR)
print(SNR)
}
for (i in 1:10){
SNR = as.numeric(snr.vec[i])
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == SNR)
print(0.5)
}
for (i in 1:10){
SNR = as.numeric(snr.vec[i])
#print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == as.numeric(i)]))
print(sim1$SNR == 0.05)
print(0.05)
}
library(dplyr)
sim1 <- read.csv("sim1.csv", header=TRUE)
sim1 %>% group_by(SNR)
mean(sim1 %>% group_by(SNR))
sim1 %>% group_by(SNR)
%>%
summarise(continuos_mean = mean(continuous, na.rm = TRUE))
sim1 %>% group_by(SNR)
%>%
summarise(continuos_mean = mean(Retention, na.rm = TRUE))
sim1
sim1 %>% group_by(SNR)
%>%
summarise(continuos_mean = mean(sim1$Retention, na.rm = TRUE))
sim1 %>% group_by(SNR)
%>%
summarise(sim1)
%>% summarise(sim1)
sim1 %>% group_by(SNR)
%>% summarise(sim1)
sim1 %>% group_by(SNR) %>% summarise(sim1)
table(sim1)
summary(sim1)
grouped_sim <- group_by(sim1, ID_sim)
View(grouped_sim)
grouped_sim <- group_by(sim1, SNR)
View(grouped_sim)
df_grouped <- dplyr::group_by(sim1, SNR)
View(df_grouped)
df_grouped <- dplyr::group_by(sim1, SNR)
dplyr::summarise(df_grouped, mean(Retention), mean(Nonzero), mean(Prediction) )
sim1 = sim1[1:40,]
sim1 <- read.csv("sim1.csv", header=TRUE)
sim1 = sim1[1:40,]
df_grouped <- dplyr::group_by(sim1, SNR)
dplyr::summarise(df_grouped, mean(Retention), mean(Nonzero), mean(Prediction) )
library(ggplot2)
library(dplyr)
setwd("C:/Projects/Comp_Stat_Project")
sim1 <- read.csv("sim1.csv", header=TRUE)
sim1 = sim1[1:40,]
print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == 0.05]))
SNR = 0.05
print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == SNR]))
for (i in 0.05){
SNR = i
}
print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == SNR]))
snr.vec = exp(seq(log(0.05), log(6), length=10))
for (i in snr.vec){
SNR = i
}
print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == SNR]))
for (i in snr.vec){
SNR = i
print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == SNR]))
}
for (i in snr.vec){
SNR = i
print(sim1$SNR == SNR)
}
View(sim1)
for (i in snr.vec){
SNR = i
print(SNR)
print(sim1$SNR == SNR)
}
snr.vec == 0.05
snr.vec == 0.05000000
sim1 <- read.csv("sim1.csv", header=TRUE)
sim1 = sim1[1:40,]
sim1$SNR = round(sim1$SNR, digits=3)
snr.vec = round(exp(seq(log(0.05), log(6), length=10)), digits=3)
for (i in snr.vec){
SNR = i
print(mean(sim1$Retention[sim1$Method == "Lasso" & sim1$SNR == SNR]))
}
